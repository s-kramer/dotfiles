###########################################################################
#							TextMate Snippets							#
###########################################################################
snippet def "#define"
#define ${1:SYMBOL}$0
endsnippet

snippet idef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif
endsnippet

snippet #if "#if #endif" !b
#if ${1:0}
${VISUAL:code}$0
#endif
endsnippet

snippet inc "#include local header (inc)"
#include "${1:`!p snip.rv = snip.basename + '.h'`}"
endsnippet

snippet Inc "#include <> (Inc)"
#include <${1:.h}>
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet maine "main() without args (main)"
int main()
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${0:/* code */}
	return 0;
}
endsnippet

snippet fors "for int loop with starting point"
for (${1:int} ${2:i} = ${3:0}, ${4:end} = ${5:count}; $2 < ${4:count}; ${5:++$2 {
	${6:/* code */}
}${0}
endsnippet

snippet for "for int loop"
for (${1:int} ${2:i} = 0; $2 < ${3:count}; ${4:++$2}) {
	${0:/* code */}
}
endsnippet

snippet fori "for int loop (fori)"
for (${4:int} ${2:i} = 0; $2 < ${1:count}; ${3:++$2})
{
	${VISUAL}${0}
}
endsnippet

snippet mal "memory allocation with malloc"
($2*) malloc(${1:count} * sizeof(${2:type})); //Todo: free the pointers
endsnippet

snippet mal "memory allocation and zeroing with calloc"
($2*) calloc(${1:count}, sizeof(${2:type})); //Todo: free the pointers
endsnippet

snippet enum "Enumeration"
enum ${1:name} { $0 };
endsnippet

snippet once "Include header once only guard with random string"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	snip.rv = ('%s' % (name)).upper()
else:
	snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet oncer "Include header once only guard with random string"
#ifndef ${1:`!p
if not snip.c:
	import random, string
	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
	snip.rv = ('%s_%s' % (name,rand)).upper()
else:
	snip.rv = snip.c`}
#define $1

${0}

#endif /* end of include guard: $1 */

endsnippet

snippet td "Typedef"
typedef ${1:int} ${2:MyCustomType};
endsnippet

snippet wh "while loop"
while (${1:/* condition */}) {
	${2:/* code */ }
}
endsnippet

snippet do "do...while loop (do)"
do {
	${0:/* code */}
} while(${1:/* condition */});
endsnippet

snippet fpr "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet if "if .. (if)"
if (${1:/* condition */})
{
	${2:/* code */}
}$0
endsnippet

snippet el "else"
else {
	${1:/* code */}
}
endsnippet

snippet eli "else if"
else if (${1: /* condition */})
{
	${2: /* code */}
}$0
endsnippet

snippet pr "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet ife "if .. else (ife)"
if (${1:/* condition */})
{
	${2}
}
else
{
	${3:/* else */}
}
endsnippet

snippet printk "printk .. (printk)"
printk(${1:KERN_ALERT} "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet st "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`}
{
	${0:/* data */}
};
endsnippet

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet /* "/* text */ like comment"
/* $1 */
endsnippet

snippet /** "/*\n text \n*/"
/*
 *   $1
 */
endsnippet

snippet ( "Insert matching bracets and an optional semicollon" w
( $1 )$0
endsnippet

snippet { "Insert matching curly brackets"
{
	$0
}

endsnippet

snippet todo "todo marker"
/* ToDo: ${1:desc} (`echo $USER`, `!v strftime("%c")`) */
endsnippet

snippet todol "todo marker long desc"
/* ToDo: ${1:desc}
 * (`echo $USER`, `!v strftime("%c")`)
 */
endsnippet

snippet note "note marker"
/* Note: ${1:desc}
 * (`echo $USER`, `!v strftime("%c")`)
 */
endsnippet

snippet noteo "note marker one liner"
/* Note: ${1:desc} (`echo $USER`, `!v strftime("%c")`) */
endsnippet

snippet desc "Section desctiption"
/*
 * ${1:desc}
 */
endsnippet

snippet sign "signature"
(`echo $USER`, `!v strftime("%c")`)
endsnippet

snippet mod_desc "Module description" !b
/********************************************************************************/
// Company:
// Engineer:			Sebastian Kramer sebastian.kramer@wp.pl
// Create Date:		 `!v strftime("%c")`
// Design Name:		 $1
// Project Name:		$2
// Description:		 $3
//
// Dependencies:		$4
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments: $5
//
/********************************************************************************/
endsnippet

snippet switch "switch statement"
switch (${1:expression}) {
	case $2:
		$3
		break;
	case $4:
		$5
		break;
	${6:..}
}
$0
endsnippet

snippet case "case statement"
case $1:
	$2
	break;
$0
endsnippet

snippet usage "Argument sanity check" !b
if (argc != ${1:arg_count})
{
	std::cout << "Usage: " << argv[0] << " ${2:arguments}\n";
	return -1;
}
endsnippet

# vim:ft=snippets:
